/*
 * 迷瘴
 *
 *题目描述

小明正在玩游戏，他控制的角色正面临着幽谷的考验——
幽谷周围瘴气弥漫，静的可怕，隐约可见地上堆满了骷髅。由于此处长年不见天日，导致空气中布满了毒素，一旦吸入体内，便会全身溃烂而死。
幸好小明早有防备，提前备好了解药材料（各种浓度的万能药水）。现在只需按照配置成不同比例的浓度。
现已知小明随身携带有n种浓度的万能药水，体积V都相同，浓度则分别为Pi%。并且知道，针对当时幽谷的瘴气情况，只需选择部分或者全部的万能药水，然后配置出浓度不大于 W%的药水即可解毒。
现在的问题是：如何配置此药，能得到最大体积的当前可用的解药呢？
特别说明：由于幽谷内设备的限制,只允许把一种已有的药全部混入另一种之中（即：不能出现对一种药只取它的一部分这样的操作）。


输入

输入数据的第一行是一个整数C，表示测试数据的组数；
每组测试数据包含2行，首先一行给出三个正整数n,V,W(1<=n,V,W<=100)；
接着一行是n个整数，表示n种药水的浓度Pi%(1<=Pi<=100)。


输出

对于每组测试数据，请输出一个整数和一个浮点数；
其中整数表示解药的最大体积，浮点数表示解药的浓度(四舍五入保留2位小数)；
如果不能配出满足要求的的解药，则请输出0 0.00。


样例输入
2
1 35 68
1
2 79 25
59 63
样例输出
35 0.01
0 0.00
 *
 *
 * */

#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn=110;
int main(){
    int n,ms[maxn];
    while(scanf("%d",&n),n!=0){
       for(int i=0;i<n;i++){
           int m,V,M;
           int curV=0;//当前的体积
           float curM = 0;//当前浓度
           scanf("%d%d%d",&m,&V,&M);
           for(int j=0;j<m;j++){
               scanf("%d",&ms[j]);
           }
           sort(ms,ms+m);
           for(int i=0;i<m;i++){
               if((curM*curV+ms[i]*V)<=M*(curV+V)){
                   curM=(curM*curV+ms[i]*V)/(V+curV);
                   curV+=V;
               }else{
                   break;
               }
           }
           printf("%d %.2f",curV,curM/100);
       }



    }
    return 0;
}